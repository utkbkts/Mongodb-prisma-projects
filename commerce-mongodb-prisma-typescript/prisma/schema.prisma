// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid()) @map("_id")
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid()) @map("_id")
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  image         String?
  email         String    @unique
  emailVerified DateTime?
  password      String?
  role          Role      @default(USER)
  createdAt     DateTime  @default(now())
  updateAt      DateTime  @updatedAt
  Account       Account[]
  Session       Session[]
  Cart          Cart[]
  Comment       Comment[]
}

enum Role {
  ADMIN
  USER
}

model Product {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  image       String
  category    String?
  price       Int
  createdAt   DateTime    @default(now())
  updateAt    DateTime    @updatedAt
  cartitem    CartItems[]
}

model Cart {
  id        String      @id @default(auto()) @map("_id") @db.ObjectId
  userId    String?     @db.ObjectId
  body      String?
  cartitem  CartItems[]
  createdAt DateTime    @default(now())
  updateAt  DateTime    @updatedAt
  user      User?       @relation(fields: [userId], references: [id])
  Comment   Comment[]

  @@map("carts")
}

model CartItems {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  productId String  @db.ObjectId
  quantity  Int
  Product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  Cart      Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)
  cartId    String  @db.ObjectId

  @@map("cartItems")
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  body      String
  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt
  userId    String   @db.ObjectId
  postId    String   @db.ObjectId

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  cart Cart @relation(fields: [postId], references: [id], onDelete: Cascade)
}


